Index: utils/websockets/servers.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import json\nimport logging\nimport queue\nimport threading\n\nfrom websockets.sync.server import serve\n\nfrom . import exceptions\n\nlogger = logging.getLogger(__name__)\n\nclass HollowGymServer:\n    def __init__(self, server_ip: str, server_port: int, frame_skip: int, game_speed: float, boss_name: str,\n                 boss_scene_name: str):\n        self.server_ip = server_ip\n        self.server_port = server_port\n\n        self.mod_client = None\n        self.mod_client_connected = threading.Event()\n        self.mod_client_ready = threading.Event()\n        self.incoming_messages = queue.Queue()\n\n        self.frame_skip = frame_skip\n        self.game_speed = game_speed\n        self.boss_name = boss_name\n        self.boss_scene_name = boss_scene_name\n\n        self.server_thread = threading.Thread(target=self._start_server, daemon=True)\n\n    def start(self):\n        logger.info(\"Starting websocket server thread\")\n        self.server_thread.start()\n\n    def _start_server(self):\n        logger.info(f\"Websocket server listening on {self.server_ip}:{self.server_port}\")\n        with serve(self._handler, self.server_ip, self.server_port) as server:\n            server.serve_forever()\n\n    def _consume(self):\n        for message in self.mod_client:\n            try:\n                json_message = json.loads(message)\n            except json.decoder.JSONDecodeError:\n                logging.error(\"response from mod client can't be json decoded, ignoring the message\")\n\n            if json_message[\"Cmd\"] == 0:\n                logging.info(\"The mod client has sent a closing message\")\n                self.reset_connection()\n            elif json_message[\"Cmd\"] == 4:\n                logging.info(\"The mod client is ready to receive commands\")\n                self.send_message(4, None, {\n                    \"BossSceneName\": self.boss_scene_name,\n                    \"BossName\": self.boss_name,\n                    \"FrameSkip\": self.frame_skip,\n                    \"GameSpeed\": self.game_speed,\n                })\n                response = self.mod_client.recv()\n                try:\n                    json_response = json.loads(response)\n                except json.decoder.JSONDecodeError:\n                    logging.error(\"response from mod client can't be json decoded, ignoring the message\")\n\n                if (json_response[\"Cmd\"] == 4):\n                    self.mod_client_ready.set()\n            else:\n                self.incoming_messages.put_nowait(json_message)\n\n    def _handler(self, websocket):\n        if self.mod_client is not None: raise exceptions.ModClientAlreadyConnected()\n        self.mod_client = websocket\n        self.mod_client_connected.set()\n\n        self._consume()\n\n        self.reset_connection()\n\n    def reset_connection(self):\n        self.mod_client_connected.clear()\n        self.mod_client_ready.clear()\n        self.mod_client = None\n\n        while not self.incoming_messages.empty():\n            self.incoming_messages.get_nowait()\n\n    def send_message(self, cmd, action=None, settings=None):\n        if self.mod_client is None: raise exceptions.ModClientNotConnected()\n        message = {\n            \"Cmd\" : cmd,\n            \"Data\": {}\n        }\n        if action is not None: message[\"Data\"][\"Action\"] = action\n        if settings is not None: message[\"Data\"][\"Settings\"] = settings\n        json_message = json.dumps(message)\n        try:\n            self.mod_client.send(json_message)\n        except websockets.exceptions.ConnectionClosed:\n            logging.error(\"Message sending aborted due to connection closed\")\n            self.reset_connection()\n\n    def message_exchange(self, cmd, action=None, settings=None):\n        if cmd == 0: raise ValueError(f\"command {cmd} doesn't not involve any message exchange\")\n\n        self.send_message(cmd, action, settings)\n        response = self.incoming_messages.get()\n\n        return response\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/utils/websockets/servers.py b/utils/websockets/servers.py
--- a/utils/websockets/servers.py	(revision ca53ae5bc1665e10f4f297218e019929f0b5d8da)
+++ b/utils/websockets/servers.py	(date 1747076438389)
@@ -4,6 +4,7 @@
 import threading
 
 from websockets.sync.server import serve
+import websockets
 
 from . import exceptions
 
@@ -20,6 +21,7 @@
         self.mod_client_ready = threading.Event()
         self.incoming_messages = queue.Queue()
 
+        self.observation_size = None
         self.frame_skip = frame_skip
         self.game_speed = game_speed
         self.boss_name = boss_name
@@ -61,6 +63,7 @@
                     logging.error("response from mod client can't be json decoded, ignoring the message")
 
                 if (json_response["Cmd"] == 4):
+                    self.observation_size = json_response["Data"]["Info"]["ObservationSize"]
                     self.mod_client_ready.set()
             else:
                 self.incoming_messages.put_nowait(json_message)
Index: utils/logger.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import logging\n\nimport numpy as np\nfrom stable_baselines3.common.callbacks import BaseCallback\n\nclass LoggingCallback(BaseCallback):\n\n    def __init__(self, verbose: int = 0, log_every_steps: int = 1000):\n        super().__init__(verbose=verbose)\n        self.log_every_steps = log_every_steps\n\n    def _on_training_start(self) -> None:\n        self.agent_health = [[]] * self.training_env.num_envs\n        self.boss_health = [[]] * self.training_env.num_envs\n        self.wins_n = 0\n        self.episodes_n = 0\n\n    def _on_step(self) -> bool:\n        new_obs = self.locals[\"new_obs\"]\n        infos = self.locals[\"infos\"]\n        dones = self.locals[\"dones\"]\n\n        for i in range(0, self.training_env.num_envs):\n            obs_n, info_n, done_n = new_obs[i], infos[i], dones[i]\n            self.logger.info(obs_n)\n            self.agent_health[0] += [obs_n[0]]\n            self.boss_health[0] += [obs_n[6]]\n            self.wins_n += 1 if info_n[\"Win\"] else 0\n            self.episodes_n += 1 if done_n else 0\n\n\n            if (done_n):\n                self.logger.record(\"custom/avg_agent_health\", np.mean(self.agent_health))\n                self.logger.record(\"custom/avg_boss_health\", np.mean(self.boss_health))\n                self.logger.dump(step=self.num_timesteps)\n\n                self.agent_health[i].clear()\n                self.boss_health[i].clear()\n\n\n        if self.num_timesteps % self.log_every_steps == 0:\n            self.logger.record(\"custom/win_rate\", self.wins_n/self.episodes_n)\n\n        return True
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/utils/logger.py b/utils/logger.py
--- a/utils/logger.py	(revision ca53ae5bc1665e10f4f297218e019929f0b5d8da)
+++ b/utils/logger.py	(date 1747078833245)
@@ -24,7 +24,7 @@
             obs_n, info_n, done_n = new_obs[i], infos[i], dones[i]
             self.logger.info(obs_n)
             self.agent_health[0] += [obs_n[0]]
-            self.boss_health[0] += [obs_n[6]]
+            self.boss_health[0] += [obs_n[27]]
             self.wins_n += 1 if info_n["Win"] else 0
             self.episodes_n += 1 if done_n else 0
 
@@ -38,7 +38,7 @@
                 self.boss_health[i].clear()
 
 
-        if self.num_timesteps % self.log_every_steps == 0:
+        if self.num_timesteps % self.log_every_steps == 0 and self.episodes_n != 0:
             self.logger.record("custom/win_rate", self.wins_n/self.episodes_n)
 
         return True
\ No newline at end of file
Index: envs/HollowGym.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import gymnasium as gym\nimport numpy as np\n\nfrom utils.websockets.exceptions import ModClientNotConnected\nfrom utils.websockets.servers import HollowGymServer\n\ndef create_env(server_ip: str, server_port: int, frame_skip : int, game_speed: float, boss_name : str, scene_name : str):\n    socket_server = HollowGymServer(\"\", 4649, frame_skip, game_speed, boss_name, scene_name)\n    socket_server.start()\n\n    socket_server.mod_client_ready.wait()\n    env = HollowGym(socket_server = socket_server)\n    return env\n\nclass HollowGym(gym.Env):\n    def __init__(self, socket_server : HollowGymServer):\n        self.socket_server = socket_server\n\n        self.action_space = gym.spaces.Discrete(4**4)\n        self._action_to_action_code = {\n            i : np.base_repr(i, 4, 5)[-4:] for i in range(4**4)\n        }\n        self.observation_space = gym.spaces.Box(low=0.0, high=1.0, shape=(89,), dtype=np.float32)\n\n    def _get_observation(self, message):\n        obs = message[\"Data\"][\"Observation\"]\n        return np.array(\n            [\n                obs[\"PlayerHpPerc\"],\n                obs[\"PlayerMpPerc\"],\n                obs[\"PlayerReserveMpPerc\"],\n                *obs[\"PlayerPos\"],\n                obs[\"PlayerFacingRight\"],\n                obs[\"BossHpPerc\"],\n                *obs[\"BossPos\"],\n                obs[\"BossFacingRight\"],\n                obs[\"PlayerBossDistance\"],\n                *obs[\"BossFsmStateOneHot\"],\n            ], dtype=np.float32,\n        )\n\n    def reset(self, seed=None, options=None):\n        try:\n            response = self.socket_server.message_exchange(1)\n        except ModClientNotConnected:\n            self.socket_server.mod_client_ready.wait()\n            return self.reset()\n\n        obs = self._get_observation(response)\n        info = response[\"Data\"][\"Info\"]\n        return obs, info\n\n    def step(self, action):\n        try:\n            response = self.socket_server.message_exchange(2, self._action_to_action_code[action])\n        except ModClientNotConnected:\n            self.socket_server.mod_client_ready.wait()\n            return self.reset()\n\n        obs = self._get_observation(response)\n        info = response[\"Data\"][\"Info\"]\n        reward = info[\"Reward\"]\n        terminated = info[\"Terminated\"]\n        truncated = False\n\n        return obs, reward, terminated, truncated, info\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/envs/HollowGym.py b/envs/HollowGym.py
--- a/envs/HollowGym.py	(revision ca53ae5bc1665e10f4f297218e019929f0b5d8da)
+++ b/envs/HollowGym.py	(date 1747076545644)
@@ -9,18 +9,18 @@
     socket_server.start()
 
     socket_server.mod_client_ready.wait()
-    env = HollowGym(socket_server = socket_server)
+    env = HollowGym(socket_server = socket_server, observation_size = socket_server.observation_size)
     return env
 
 class HollowGym(gym.Env):
-    def __init__(self, socket_server : HollowGymServer):
+    def __init__(self, socket_server : HollowGymServer, observation_size : int):
         self.socket_server = socket_server
 
         self.action_space = gym.spaces.Discrete(4**4)
         self._action_to_action_code = {
             i : np.base_repr(i, 4, 5)[-4:] for i in range(4**4)
         }
-        self.observation_space = gym.spaces.Box(low=0.0, high=1.0, shape=(89,), dtype=np.float32)
+        self.observation_space = gym.spaces.Box(low=-1.0, high=1.0, shape=(observation_size,), dtype=np.float32)
 
     def _get_observation(self, message):
         obs = message["Data"]["Observation"]
@@ -29,13 +29,16 @@
                 obs["PlayerHpPerc"],
                 obs["PlayerMpPerc"],
                 obs["PlayerReserveMpPerc"],
-                *obs["PlayerPos"],
-                obs["PlayerFacingRight"],
+                *obs["PlayerPosition"],
+                *obs["PlayerVelocity"],
+                *obs["PlayerState"],
                 obs["BossHpPerc"],
-                *obs["BossPos"],
+                *obs["BossPosition"],
+                *obs["BossVelocity"],
                 obs["BossFacingRight"],
                 obs["PlayerBossDistance"],
-                *obs["BossFsmStateOneHot"],
+                obs["SceneCenterDistance"],
+                *obs["BossStateOneHot"],
             ], dtype=np.float32,
         )
 
Index: main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import logging\nimport sys\n\nfrom stable_baselines3 import DQN\nfrom stable_baselines3.common.callbacks import CheckpointCallback, CallbackList\nfrom stable_baselines3.common.logger import configure\nfrom stable_baselines3.common.env_checker import check_env\n\nfrom envs.HollowGym import HollowGym, create_env\nfrom utils.logger import LoggingCallback\nfrom utils.websockets.servers import HollowGymServer\n\n\n# Create log\n\nlogging.basicConfig(\n    level=logging.INFO,\n    format=\"%(asctime)s [%(levelname)s] %(message)s\",\n    handlers=[logging.FileHandler(\"logs/debug.log\"), logging.StreamHandler(sys.stdout)],\n)\nmodel_logger = configure(\n    \"logs/\",\n    [\"stdout\", \"tensorboard\"]\n)\nmain_logger = logging.getLogger(__name__)\n\n\ndef main():\n    total_time_steps = 500_000\n\n    env = create_env(\"\",  4649, 4, 2,\"Hornet Boss 1\", \"GG_Hornet_1\")\n    check_env(env, warn=True, skip_render_check=True)\n\n    checkpoint_callback = CheckpointCallback(\n        save_freq=25_000,\n        save_path=\"./checkpoints/\",\n        name_prefix=\"ppo_hornet_v2\",\n        save_replay_buffer=True,\n        save_vecnormalize=True,\n    )\n    logging_callback = LoggingCallback(verbose=1, log_every_steps=500)\n    env_callback = CallbackList([checkpoint_callback, logging_callback])\n\n\n<<<<<<< HEAD\n    best_score = -450\n    score_history = []\n    learn_iters = 0\n    avg_score = 0\n    n_steps = 0\n\n    logger.info(\"Initialization done, starting training\")\n    for i in range(n_games):\n        logging.info(f\"Starting game {i}\")\n        observation, _ = await env.reset()\n        done = False\n        score = 0\n\n        while not done:\n            action, prob, val = agent.choose_action(observation)\n            logger.info(f\"action chosen: {action}\")\n\n            observation_, reward, done, _, _ = await env.step(action)\n            n_steps += 1\n            score += reward\n            logger.info(f\"new obs:\\n{observation_}\")\n\n            agent.remember(observation, action, prob, val, reward, done)\n            if n_steps % N == 0:\n                agent.learn()\n                learn_iters += 1\n\n            observation = observation_\n\n        score_history.append(score)\n        avg_score = np.mean(score_history[-100:])\n\n        if avg_score > best_score:\n            best_score = avg_score\n            agent.save_models()\n\n\n        logging.info(\"Test\")\n\n        x = [i + 1 for i in range(len(score_history))]\n        plot_learning_curve(x, score_history, \"ppo_learning_curve.png\")\n\n        logging.info(\n            f\"episode: {i}, score: {score}, avg_score: {avg_score}, time_steps: {n_steps}, learning_steps: {learn_iters}\"\n        )\n=======\n    model = DQN(\n        \"MlpPolicy\",\n        env,\n        verbose=1,\n        learning_starts=5000,   # to not reinforce bad guesses due to initial exploration (+ let buffer fill up)\n        learning_rate=1e-5,     # how big each update to the Q-network weights is during training.\n        gamma=0.99,             # discount factor: how much an agent prioritizes future rewards over immediate ones\n        tau=1,                  # soft update coeff: how fast the target network moves toward the online network\n        buffer_size=100_000,\n        batch_size=64,\n        train_freq=(4, \"step\"),\n        gradient_steps=1,       # how many gradient updates per step\n        exploration_initial_eps=1.0,    # start exploration rate\n        exploration_final_eps=0.1,      # end exploration rate\n        exploration_fraction=0.5,       # expl. rate will linearly decrease from start to end in (exploration_fraction * total_timesteps) steps\n        tensorboard_log=\"logs/\",\n    )\n    model.set_logger(model_logger)\n    model.learn(\n        total_timesteps=total_time_steps,\n        callback=env_callback,\n        tb_log_name=\"Main training loop\"\n    )\n    model.save(\"checkpoints/ppo_hornet_v2\")\n>>>>>>> 1a554fa22ccaf4cb4438b7fbd3e20c48e2ea876a\n\nif (__name__ == \"__main__\"):\n    main()\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/main.py b/main.py
--- a/main.py	(revision ca53ae5bc1665e10f4f297218e019929f0b5d8da)
+++ b/main.py	(date 1747076274989)
@@ -12,7 +12,6 @@
 
 
 # Create log
-
 logging.basicConfig(
     level=logging.INFO,
     format="%(asctime)s [%(levelname)s] %(message)s",
@@ -41,54 +40,6 @@
     logging_callback = LoggingCallback(verbose=1, log_every_steps=500)
     env_callback = CallbackList([checkpoint_callback, logging_callback])
 
-
-<<<<<<< HEAD
-    best_score = -450
-    score_history = []
-    learn_iters = 0
-    avg_score = 0
-    n_steps = 0
-
-    logger.info("Initialization done, starting training")
-    for i in range(n_games):
-        logging.info(f"Starting game {i}")
-        observation, _ = await env.reset()
-        done = False
-        score = 0
-
-        while not done:
-            action, prob, val = agent.choose_action(observation)
-            logger.info(f"action chosen: {action}")
-
-            observation_, reward, done, _, _ = await env.step(action)
-            n_steps += 1
-            score += reward
-            logger.info(f"new obs:\n{observation_}")
-
-            agent.remember(observation, action, prob, val, reward, done)
-            if n_steps % N == 0:
-                agent.learn()
-                learn_iters += 1
-
-            observation = observation_
-
-        score_history.append(score)
-        avg_score = np.mean(score_history[-100:])
-
-        if avg_score > best_score:
-            best_score = avg_score
-            agent.save_models()
-
-
-        logging.info("Test")
-
-        x = [i + 1 for i in range(len(score_history))]
-        plot_learning_curve(x, score_history, "ppo_learning_curve.png")
-
-        logging.info(
-            f"episode: {i}, score: {score}, avg_score: {avg_score}, time_steps: {n_steps}, learning_steps: {learn_iters}"
-        )
-=======
     model = DQN(
         "MlpPolicy",
         env,
@@ -113,7 +64,6 @@
         tb_log_name="Main training loop"
     )
     model.save("checkpoints/ppo_hornet_v2")
->>>>>>> 1a554fa22ccaf4cb4438b7fbd3e20c48e2ea876a
 
 if (__name__ == "__main__"):
     main()
Index: core/PPO.py
===================================================================
diff --git a/core/PPO.py b/core/PPO.py
deleted file mode 100644
--- a/core/PPO.py	(revision ca53ae5bc1665e10f4f297218e019929f0b5d8da)
+++ /dev/null	(revision ca53ae5bc1665e10f4f297218e019929f0b5d8da)
@@ -1,113 +0,0 @@
-import os
-
-import numpy as np
-import torch as T
-import torch.nn as nn
-import torch.optim as optim
-from torch.distributions.categorical import Categorical
-
-
-class PPOMemory:
-    def __init__(self, batch_size):
-        self.states = []
-        self.probs = []
-        self.vals = []
-        self.actions = []
-        self.rewards = []
-        self.dones = []
-
-        self.batch_size = batch_size
-
-    def generate_batches(self):
-        n_states = len(self.states)
-        batch_start = np.arange(0, n_states, self.batch_size)
-        indices = np.arange(n_states, dtype=np.int64)
-        np.random.shuffle(indices)
-        batches = [indices[i:i + self.batch_size] for i in batch_start]
-
-        return np.array(self.states), \
-            np.array(self.actions), \
-            np.array(self.probs), \
-            np.array(self.vals), \
-            np.array(self.rewards), \
-            np.array(self.dones), \
-            batches
-
-    def store_memory(self, state, action, probs, vals, reward, done):
-        self.states.append(state)
-        self.actions.append(action)
-        self.probs.append(probs)
-        self.vals.append(vals)
-        self.rewards.append(reward)
-        self.dones.append(done)
-
-    def clear_memory(self):
-        self.states = []
-        self.probs = []
-        self.actions = []
-        self.rewards = []
-        self.dones = []
-        self.vals = []
-
-
-class ActorNetwork(nn.Module):
-    def __init__(self, n_actions, input_dims, alpha,
-                 fc1_dims=32, fc2_dims=32, chkpt_dir='tmp/ppo'):
-        super(ActorNetwork, self).__init__()
-
-        if not os.path.exists(chkpt_dir):
-            os.makedirs(chkpt_dir)
-
-        self.checkpoint_file = os.path.join(chkpt_dir, 'actor_torch_ppo')
-        self.actor = nn.Sequential(
-            nn.Linear(input_dims, fc1_dims),
-            nn.ReLU(),
-            nn.Linear(fc1_dims, fc2_dims),
-            nn.ReLU(),
-            nn.Linear(fc2_dims, n_actions),
-            nn.Softmax(dim=-1)
-        )
-
-        self.optimizer = optim.Adam(self.parameters(), lr=alpha)
-        self.device = T.device('cuda:0' if T.cuda.is_available() else 'cpu')
-        self.to(self.device)
-
-    def forward(self, state):
-        dist = self.actor(state)
-        dist = Categorical(dist)
-        return dist
-
-    def save_checkpoint(self):
-        T.save(self.state_dict(), self.checkpoint_file)
-
-    def load_checkpoint(self):
-        self.load_state_dict(T.load(self.checkpoint_file))
-
-
-class CriticNetwork(nn.Module):
-    def __init__(self, input_dims, alpha, fc1_dims=32, fc2_dims=32,
-                 chkpt_dir='tmp/ppo'):
-        super(CriticNetwork, self).__init__()
-
-        self.checkpoint_file = os.path.join(chkpt_dir, 'critic_torch_ppo')
-        self.critic = nn.Sequential(
-            nn.Linear(input_dims, fc1_dims),
-            nn.ReLU(),
-            nn.Linear(fc1_dims, fc2_dims),
-            nn.ReLU(),
-            nn.Linear(fc2_dims, 1)
-        )
-
-        self.optimizer = optim.Adam(self.parameters(), lr=alpha)
-        self.device = T.device('cuda:0' if T.cuda.is_available() else 'cpu')
-        self.to(self.device)
-
-    def forward(self, state):
-        value = self.critic(state)
-        return value
-
-    def save_checkpoint(self):
-        T.save(self.state_dict(), self.checkpoint_file)
-
-    def load_checkpoint(self):
-        self.load_state_dict(T.load(self.checkpoint_file))
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"AutoImportSettings\">\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\n  </component>\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"d351a28c-dfbc-4713-8c9b-b38338046599\" name=\"Changes\" comment=\"mod setup\">\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/main.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/main.py\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/utils/logger.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/utils/logger.py\" afterDir=\"false\" />\n    </list>\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"FileTemplateManagerImpl\">\n    <option name=\"RECENT_TEMPLATES\">\n      <list>\n        <option value=\"Python Script\" />\n      </list>\n    </option>\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n  </component>\n  <component name=\"GitHubPullRequestSearchHistory\">{\n  &quot;lastFilter&quot;: {\n    &quot;state&quot;: &quot;OPEN&quot;,\n    &quot;assignee&quot;: &quot;CiottoloMaggico&quot;\n  }\n}</component>\n  <component name=\"GithubPullRequestsUISettings\">{\n  &quot;selectedUrlAndAccountId&quot;: {\n    &quot;url&quot;: &quot;https://github.com/CiottoloMaggico/HollowAI.git&quot;,\n    &quot;accountId&quot;: &quot;9a639f0e-cd5a-4684-b0aa-8fe0cfbca701&quot;\n  }\n}</component>\n  <component name=\"ProjectColorInfo\">{\n  &quot;associatedIndex&quot;: 6\n}</component>\n  <component name=\"ProjectId\" id=\"2waTH2xQVItj4jzsKbRs4zIwx0l\" />\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\">{\n  &quot;keyToString&quot;: {\n    &quot;ModuleVcsDetector.initialDetectionPerformed&quot;: &quot;true&quot;,\n    &quot;Python.main.executor&quot;: &quot;Run&quot;,\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\n    &quot;RunOnceActivity.git.unshallow&quot;: &quot;true&quot;,\n    &quot;git-widget-placeholder&quot;: &quot;master&quot;,\n    &quot;last_opened_file_path&quot;: &quot;/home/ciottolomaggico/PycharmProjects/HollowAI/Core&quot;,\n    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,\n    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,\n    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,\n    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,\n    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,\n    &quot;settings.editor.selected.configurable&quot;: &quot;com.jetbrains.python.configuration.PyActiveSdkModuleConfigurable&quot;,\n    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;\n  }\n}</component>\n  <component name=\"RecentsManager\">\n    <key name=\"CopyFile.RECENT_KEYS\">\n      <recent name=\"$PROJECT_DIR$/Core\" />\n    </key>\n    <key name=\"MoveFile.RECENT_KEYS\">\n      <recent name=\"$PROJECT_DIR$/utils\" />\n    </key>\n  </component>\n  <component name=\"RunManager\">\n    <configuration name=\"main\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\n      <module name=\"HollowAI\" />\n      <option name=\"ENV_FILES\" value=\"\" />\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\n      <option name=\"PARENT_ENVS\" value=\"true\" />\n      <envs>\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\n      </envs>\n      <option name=\"SDK_HOME\" value=\"\" />\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/main.py\" />\n      <option name=\"PARAMETERS\" value=\"\" />\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\n      <option name=\"MODULE_MODE\" value=\"false\" />\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\n      <option name=\"INPUT_FILE\" value=\"\" />\n      <method v=\"2\" />\n    </configuration>\n    <recent_temporary>\n      <list>\n        <item itemvalue=\"Python.main\" />\n      </list>\n    </recent_temporary>\n  </component>\n  <component name=\"SharedIndexes\">\n    <attachedChunks>\n      <set>\n        <option value=\"bundled-js-predefined-d6986cc7102b-f27c65a3e318-JavaScript-PY-251.23774.444\" />\n        <option value=\"bundled-python-sdk-890ed5b35930-d9c5bdb153f4-com.jetbrains.pycharm.pro.sharedIndexes.bundled-PY-251.23774.444\" />\n      </set>\n    </attachedChunks>\n  </component>\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"d351a28c-dfbc-4713-8c9b-b38338046599\" name=\"Changes\" comment=\"\" />\n      <created>1746278593653</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1746278593653</updated>\n      <workItem from=\"1746278594732\" duration=\"7213000\" />\n      <workItem from=\"1746449217089\" duration=\"6000\" />\n      <workItem from=\"1746449776300\" duration=\"9524000\" />\n      <workItem from=\"1746518341329\" duration=\"614000\" />\n      <workItem from=\"1746562598641\" duration=\"164000\" />\n      <workItem from=\"1746617178569\" duration=\"12648000\" />\n      <workItem from=\"1746631174263\" duration=\"3448000\" />\n      <workItem from=\"1746689275326\" duration=\"17698000\" />\n      <workItem from=\"1746709154415\" duration=\"4112000\" />\n      <workItem from=\"1746714992382\" duration=\"3535000\" />\n      <workItem from=\"1746719977722\" duration=\"9053000\" />\n      <workItem from=\"1746776010100\" duration=\"4491000\" />\n      <workItem from=\"1746816820844\" duration=\"21449000\" />\n      <workItem from=\"1746911783726\" duration=\"6459000\" />\n      <workItem from=\"1746918258382\" duration=\"39000\" />\n      <workItem from=\"1746947773668\" duration=\"884000\" />\n      <workItem from=\"1746954287960\" duration=\"6924000\" />\n      <workItem from=\"1746970459316\" duration=\"3807000\" />\n    </task>\n    <task id=\"LOCAL-00001\" summary=\"Working gym, need huge refactoring\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1746632395779</created>\n      <option name=\"number\" value=\"00001\" />\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1746632395780</updated>\n    </task>\n    <task id=\"LOCAL-00002\" summary=\"Improved gym, todo: models\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1746706179697</created>\n      <option name=\"number\" value=\"00002\" />\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1746706179697</updated>\n    </task>\n    <task id=\"LOCAL-00003\" summary=\"Improved gym, todo: models\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1746706495757</created>\n      <option name=\"number\" value=\"00003\" />\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1746706495757</updated>\n    </task>\n    <task id=\"LOCAL-00004\" summary=\"Improved gym, todo: models\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1746714871699</created>\n      <option name=\"number\" value=\"00004\" />\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1746714871699</updated>\n    </task>\n    <task id=\"LOCAL-00005\" summary=\"Observation improvements\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1746719682950</created>\n      <option name=\"number\" value=\"00005\" />\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1746719682950</updated>\n    </task>\n    <task id=\"LOCAL-00006\" summary=\"Observation improvements\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1746722321988</created>\n      <option name=\"number\" value=\"00006\" />\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1746722321988</updated>\n    </task>\n    <task id=\"LOCAL-00007\" summary=\"saving models\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1746723999293</created>\n      <option name=\"number\" value=\"00007\" />\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1746723999293</updated>\n    </task>\n    <task id=\"LOCAL-00008\" summary=\"saving models\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1746859333032</created>\n      <option name=\"number\" value=\"00008\" />\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1746859333032</updated>\n    </task>\n    <task id=\"LOCAL-00009\" summary=\"adding callbacks\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1746918292701</created>\n      <option name=\"number\" value=\"00009\" />\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1746918292701</updated>\n    </task>\n    <task id=\"LOCAL-00010\" summary=\"mod setup\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1746971853931</created>\n      <option name=\"number\" value=\"00010\" />\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1746971853931</updated>\n    </task>\n    <option name=\"localTasksCounter\" value=\"11\" />\n    <servers />\n  </component>\n  <component name=\"TypeScriptGeneratedFilesManager\">\n    <option name=\"version\" value=\"3\" />\n  </component>\n  <component name=\"Vcs.Log.Tabs.Properties\">\n    <option name=\"TAB_STATES\">\n      <map>\n        <entry key=\"MAIN\">\n          <value>\n            <State />\n          </value>\n        </entry>\n      </map>\n    </option>\n  </component>\n  <component name=\"VcsManagerConfiguration\">\n    <MESSAGE value=\"Working gym, need huge refactoring\" />\n    <MESSAGE value=\"Improved gym, todo: models\" />\n    <MESSAGE value=\"Observation improvements\" />\n    <MESSAGE value=\"saving models\" />\n    <MESSAGE value=\"adding callbacks\" />\n    <MESSAGE value=\"mod setup\" />\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"mod setup\" />\n  </component>\n  <component name=\"com.intellij.coverage.CoverageDataManagerImpl\">\n    <SUITE FILE_PATH=\"coverage/HollowAI$main.coverage\" NAME=\"main Coverage Results\" MODIFIED=\"1746976176521\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision ca53ae5bc1665e10f4f297218e019929f0b5d8da)
+++ b/.idea/workspace.xml	(date 1747078860621)
@@ -6,8 +6,11 @@
   <component name="ChangeListManager">
     <list default="true" id="d351a28c-dfbc-4713-8c9b-b38338046599" name="Changes" comment="mod setup">
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/core/PPO.py" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/envs/HollowGym.py" beforeDir="false" afterPath="$PROJECT_DIR$/envs/HollowGym.py" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/main.py" beforeDir="false" afterPath="$PROJECT_DIR$/main.py" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/utils/logger.py" beforeDir="false" afterPath="$PROJECT_DIR$/utils/logger.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/utils/websockets/servers.py" beforeDir="false" afterPath="$PROJECT_DIR$/utils/websockets/servers.py" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -22,6 +25,11 @@
     </option>
   </component>
   <component name="Git.Settings">
+    <option name="RECENT_BRANCH_BY_REPOSITORY">
+      <map>
+        <entry key="$PROJECT_DIR$" value="master" />
+      </map>
+    </option>
     <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
   </component>
   <component name="GitHubPullRequestSearchHistory">{
@@ -132,6 +140,8 @@
       <workItem from="1746947773668" duration="884000" />
       <workItem from="1746954287960" duration="6924000" />
       <workItem from="1746970459316" duration="3807000" />
+      <workItem from="1747039721770" duration="18000" />
+      <workItem from="1747062657065" duration="6030000" />
     </task>
     <task id="LOCAL-00001" summary="Working gym, need huge refactoring">
       <option name="closed" value="true" />
@@ -240,6 +250,6 @@
     <option name="LAST_COMMIT_MESSAGE" value="mod setup" />
   </component>
   <component name="com.intellij.coverage.CoverageDataManagerImpl">
-    <SUITE FILE_PATH="coverage/HollowAI$main.coverage" NAME="main Coverage Results" MODIFIED="1746976176521" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
+    <SUITE FILE_PATH="coverage/HollowAI$main.coverage" NAME="main Coverage Results" MODIFIED="1747076723342" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
   </component>
 </project>
\ No newline at end of file
